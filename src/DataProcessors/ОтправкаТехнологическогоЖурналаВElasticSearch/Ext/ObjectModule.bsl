
// Алгоритм работы следующий:
// 1. Подготовка к работе
// 1.1 Проверка переданных параметров
//     - Сервер Elasticsearch
//     - Порт Elasticsearch
//     - Разделение индексов по базам
//     - Имя базы для индекса. [Обязательно при разделении]
//     - Разделение индексов по периодам
//     - Периодичность индексов. По годам, по месяцам, по дням. [Обязательно при разделении]
//     - Отбор по дате начала.
//     - Отбор по дате окончания. При отсутствии будет выгружен за 1 день (берется первый).
//     - Максимальное количество записей в пакете. По умолчанию 0 (означает все).
//     - Очищать журнал регистрации при успешной выгрузке.
// 1.2 Проверка доступности Elasticsearch.
//     curl -XGET localhost:9200/_stats
// 1.3 Проверка существования шаблона 1c-eventlog. Создание шаблона при отсутствии
//     curl -XHEAD -i localhost:9200/_template/template_1
//     curl -XPUT localhost:9200/_template/template_1
// 2. Копирование журнала регистрации во временный каталог
// 3. Чтение копии журнала в таблицу значений
// 4. Отправка журнала регистрации в Elasticsearch
// 5. Удаление временных файлов
// 6. Перенос/удаление отправленных данных из журнала регистрации


Процедура ВыполнитьОтправкуТехнологическогоЖурнала() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытияЗамера.Ссылка КАК Ссылка,
	|	СобытияЗамера.Наименование КАК Наименование,
	|	СобытияЗамера.ТипПроцесса КАК ТипПроцесса,
	|	СобытияЗамера.Файл КАК Файл,
	|	СобытияЗамера.НомерСтрокиФайла КАК НомерСтрокиФайла,
	|	СобытияЗамера.ДатаСобытия КАК ДатаСобытия,
	|	СобытияЗамера.ДатаСобытияМкс КАК ДатаСобытияМкс,
	|	СобытияЗамера.ДлительностьМкс КАК ДлительностьМкс,
	|	СобытияЗамера.ТипСобытия КАК ТипСобытия,
	|	СобытияЗамера.УровеньСобытия КАК УровеньСобытия,
	|	СобытияЗамера.ВсеСвойства КАК ВсеСвойства
	|ИЗ
	|	Справочник.СобытияЗамера КАК СобытияЗамера
	|ГДЕ
	|	НЕ СобытияЗамера.ПометкаУдаления
	|	И СобытияЗамера.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Замер);
	
	ТаблицаЖурнала = Запрос.Выполнить().Выгрузить();
	
	МассивДанных = Новый Массив;
	
	Для каждого СтрТЗ Из ТаблицаЖурнала Цикл
		
		ТекСтруктура = Новый Структура("ID, Период, Наименование, ТипПроцесса, Файл, НомерСтрокиФайла, ДатаСобытия, ДатаСобытияМкс, ДлительностьМкс, ТипСобытия, УровеньСобытия, ВсеСвойства");
		
		ЗаполнитьЗначенияСвойств(ТекСтруктура, СтрТЗ);
		
		ТекСтруктура.ТипПроцесса = СтрТЗ.ТипПроцесса.Наименование;
		ТекСтруктура.ТипСобытия  = СтрТЗ.ТипСобытия.Наименование;
		ТекСтруктура.Файл        = СтрТЗ.Файл.Наименование;
		ТекСтруктура.Период = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd'T'HH:mm:ss");
		ТекСтруктура.ID = СтрЗаменить(XMLСтрока(Новый УникальныйИдентификатор()), "-","");
		ТекСтруктура.ВсеСвойства = СтрТЗ.ВсеСвойства;
		
		
		МассивДанных.Добавить(ТекСтруктура);
	
	КонецЦикла;
	
	МассивРез = ПреобразоватьМассивСтруктурВМассивJSON(МассивДанных);
	
	НастройкаЛогирования = Новый Структура("ПутьКЭластику, Порт, ИмяИндексаElasticsearch, ИмяТипаElasticsearch", "linsrv01.apk-agroeco.ru", 9200, "1c-eventtechlog_4", "sessn1c");
	
	Для Каждого Структура Из МассивРез Цикл
		
		Если НЕ ЗаписатьЗначениеВЭластик(Структура.id, Структура.JSON, НастройкаЛогирования) Тогда
			
			
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ЗаписатьЗначениеВЭластик(id, JSON, НастройкаЛогирования)
	
	ПутьКЭластику  =  НастройкаЛогирования.ПутьКЭластику; //"linsrv01.apk-agroeco.ru";
	Порт           =  НастройкаЛогирования.Порт; //9200; 
	ИмяИндексаElasticsearch = НастройкаЛогирования.ИмяИндексаElasticsearch; //"dev0test11";
	ИмяТипаElasticsearch	= НастройкаЛогирования.ИмяТипаElasticsearch; //"sessn1c";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(ПутьКЭластику,Порт);
		Заголовки = Новый Соответствие;
	    Заголовки["Content-Type"] = "application/json";
		
		URL = СтрШаблон("/%1/%2/%3", ИмяИндексаElasticsearch, ИмяТипаElasticsearch, XMLСтрока(id));
		Запрос = Новый HTTPЗапрос(URL, Заголовки);
		
	    Запрос.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8); 
	    Ответ = Соединение.Записать(Запрос);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции


Процедура ВыполнитьОтправкуЖурналаРегистрации()
	
	ДатаЖурналаРегистрации = ПолучитьДатуЖурналаРегистрации();
	
	Если ДатаЖурналаРегистрации = КонецДня(ТекущаяДата()) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьШаблонПриОтсутствии();
	
	ИмяФайлаКопииЖурнала = СкопироватьЖурналВоВременныйКаталог(КонецДня(ТекущаяДата()));
	
	ТаблицаЖурнала = ВыгрузитьЖурналИзФайла(ИмяФайлаКопииЖурнала);
	
	ОтправкаУспешна = ОтправитьЖурнал(ТаблицаЖурнала, ПолучитьСоединение());
	
	УдалитьФайлы(ИмяФайлаКопииЖурнала);
	
	//Если ОтправкаУспешна Тогда
	//	ОчиститьЖурналРегистрации(
	//		Новый Структура("ДатаОкончания", 
	//		ДатаЖурналаРегистрации)
	//	);
	//КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьШаблонТехЖурналПриОтсутствии()
	
	ИмяШаблона = "1c-eventtechlog";
	
	Соединение = ПолучитьСоединение();
	
	Сообщить("Проверка существования шаблона ""1c-eventtechlog"".");
	
	Если ШаблонСуществует(ИмяШаблона, Соединение) Тогда
		
		Сообщить("Шаблон найден.");
		Возврат;
		
	КонецЕсли;
	
	Сообщить("Шаблон отсутствует. Создание шаблона.");
	
	ОписаниеШаблона = ШаблонИндексаТехнологическогоЖурнала();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОписаниеШаблона);
	
	СериализованноеЗначение = ЗаписьJSON.Закрыть();

	СоздатьШаблон(ИмяШаблона, СериализованноеЗначение, Соединение);
	
	Сообщить("Шаблон создан успешно.");
	
КонецПроцедуры

Процедура СоздатьШаблонПриОтсутствии()
	
	ИмяШаблона = "1c-eventlog";
	
	Соединение = ПолучитьСоединение();
	
	Сообщить("Проверка существования шаблона ""1c-eventlog"".");
	
	Если ШаблонСуществует(ИмяШаблона, Соединение) Тогда
		
		Сообщить("Шаблон найден.");
		Возврат;
		
	КонецЕсли;
	
	Сообщить("Шаблон отсутствует. Создание шаблона.");
	
	ОписаниеШаблона = ШаблонИндексаЖурналаРегистрации();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОписаниеШаблона);
	
	СериализованноеЗначение = ЗаписьJSON.Закрыть();

	СоздатьШаблон(ИмяШаблона, СериализованноеЗначение, Соединение);
	
	Сообщить("Шаблон создан успешно.");
	
КонецПроцедуры

Функция ШаблонИндексаЖурналаРегистрации()
	
	Шаблон = Новый Структура;
	
	Шаблон.Вставить("template", "1c-eventlog-*");
	Шаблон.Вставить("mappings", Новый Структура);
	
	СвойстваЗаписи = Новый Структура;
	СвойстваПолей  = Новый Структура;
	
	СвойстваПолей.Вставить("Дата",                    Новый Структура("type, format", "date", "yyyy-MM-dd'T'HH:mm:ss"));
	СвойстваПолей.Вставить("Пользователь",            Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ИмяПользователя",         Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Компьютер",               Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ИмяПриложения",           Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеПриложения", Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Сеанс",                   Новый Структура("type", "long"));
	СвойстваПолей.Вставить("Событие",                 Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеСобытия",    Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Комментарий",             Новый Структура("type", "string"));
	СвойстваПолей.Вставить("СтатусТранзакции",        Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Транзакция",              Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Метаданные",              Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеМетаданных", Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Данные",                  Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеДанных",     Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Соединение",              Новый Структура("type", "long"));
	СвойстваПолей.Вставить("ОсновнойIPПорт",          Новый Структура("type", "long"));
	СвойстваПолей.Вставить("ВспомогательныйIPПорт",   Новый Структура("type", "long"));
	СвойстваПолей.Вставить("РабочийСервер",           Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Уровень",                 Новый Структура("type, index", "string", "not_analyzed"));
		
	СвойстваЗаписи.Вставить("properties", СвойстваПолей);
	Шаблон.mappings.Вставить("record", СвойстваЗаписи);
	
	Возврат Шаблон;
	
КонецФункции

Функция ШаблонИндексаТехнологическогоЖурнала()

	Шаблон = Новый Структура;
	
	Шаблон.Вставить("index_patterns", "1c-eventtechlog-*");
	Шаблон.Вставить("mappings", Новый Структура);
	
	СвойстваЗаписи = Новый Структура;
	СвойстваПолей  = Новый Структура;
	
	СвойстваПолей.Вставить("Дата",                    Новый Структура("type, format", "date", "yyyy-MM-dd'T'HH:mm:ss"));
	СвойстваПолей.Вставить("Пользователь",            Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ИмяПользователя",         Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Компьютер",               Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ИмяПриложения",           Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ПредставлениеПриложения", Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Сеанс",                   Новый Структура("type", "long"));
	//////СвойстваПолей.Вставить("Событие",                 Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ПредставлениеСобытия",    Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Комментарий",             Новый Структура("type", "string"));
	//////СвойстваПолей.Вставить("СтатусТранзакции",        Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Транзакция",              Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Метаданные",              Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ПредставлениеМетаданных", Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Данные",                  Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("ПредставлениеДанных",     Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Соединение",              Новый Структура("type", "long"));
	//////СвойстваПолей.Вставить("ОсновнойIPПорт",          Новый Структура("type", "long"));
	//////СвойстваПолей.Вставить("ВспомогательныйIPПорт",   Новый Структура("type", "long"));
	//////СвойстваПолей.Вставить("РабочийСервер",           Новый Структура("type, index", "string", "not_analyzed"));
	//////СвойстваПолей.Вставить("Уровень",                 Новый Структура("type, index", "string", "not_analyzed"));
		
	СвойстваЗаписи.Вставить("properties", СвойстваПолей);
	Шаблон.mappings.Вставить("record", СвойстваЗаписи);
	
	Возврат Шаблон;

КонецФункции // ШаблонИндексаТехнологическогоЖурнала()


#Область Вспомогательные_процедуры

Функция ПолучитьДатуЖурналаРегистрации()
	
	ДатаЖурнала = КонецДня(ТекущаяДата());
	
	ТаблицаЖурнала = Новый ТаблицаЗначений();
	
	ВыгрузитьЖурналРегистрации(ТаблицаЖурнала, , "Дата");
	
	Если ЗначениеЗаполнено(ТаблицаЖурнала) Тогда
		
		ДатаЖурнала = КонецДня(ТаблицаЖурнала[0].Дата);
		
	КонецЕсли;
	
	Возврат ДатаЖурнала;	
	
КонецФункции

Функция СкопироватьЖурналВоВременныйКаталог(ДатаЖурнала)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("lgd");
	
	СкопироватьЖурналРегистрации(, ИмяВременногоФайла, Новый Структура("ДатаОкончания", ДатаЖурнала));
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция ВыгрузитьЖурналИзФайла(ИмяФайла)
	
	ТаблицаЖурнала = Новый ТаблицаЗначений();
	
	ВыгрузитьЖурналРегистрации(ТаблицаЖурнала, , , ИмяФайла);
	
	Возврат ТаблицаЖурнала;
	
КонецФункции

Функция ОтправитьЖурнал(ТаблицаЖурнала, ПараметрыПодключения)
	
	РезультатОтправки = Истина;
	
	Для Каждого СтрокаЖурнала Из ТаблицаЖурнала Цикл
		
		СтрокаТелоЗапроса = СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала);
		
		ИмяИндекса = "/1c-eventlog-" + Формат(СтрокаЖурнала.Дата, "ДФ=yyyy-MM") + "/record/";
		
		РезультатОперации = ВыполнитьОтправкуПоHTTP(ИмяИндекса, СтрокаТелоЗапроса, ПараметрыПодключения);		
		
		РезультатОтправки = РезультатОтправки И РезультатОперации;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ОтправитьТехнологическийЖурнал(ТаблицаЖурнала, ПараметрыПодключения)
	
	РезультатОтправки = Истина;
	
	Для Каждого СтрокаЖурнала Из ТаблицаЖурнала Цикл
		
		СтрокаТелоЗапроса = СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала);
		
		ИмяИндекса = "/1c-eventtechlog-" + Формат(СтрокаЖурнала.Дата, "ДФ=yyyy-MM") + "/record/";
		
		РезультатОперации = ВыполнитьОтправкуПоHTTP(ИмяИндекса, СтрокаТелоЗапроса, ПараметрыПодключения);		
		
		РезультатОтправки = РезультатОтправки И РезультатОперации;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала)
	
	ДанныеСтроки = ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеСтроки);
	
	СериализованноеЗначение = ЗаписьJSON.Закрыть();
	
	Возврат СериализованноеЗначение;
	
КонецФункции

Функция ВыполнитьОтправкуПоHTTP(АдресРесурса, СтрокаТелоЗапроса, Соединение)
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, , ИспользованиеByteOrderMark.НеИспользовать);
	
	HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	
	Сообщить(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Возврат HTTPОтвет.КодСостояния = 201;	
	
КонецФункции

Функция ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала)
	
	Колонки = СтрокаЖурнала.Владелец().Колонки;
	
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		
		ИмяПоля = Колонка.Имя;
		ЗначениеПоля = СтрокаЖурнала[ИмяПоля];
				
		Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
			
			Для Каждого ПолеСтруктуры Из ЗначениеПоля Цикл
				
				ДанныеСтроки.Вставить(ИмяПоля + "_" + ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			
			ДанныеСтроки.Вставить(Колонка.Имя, Формат(ЗначениеПоля, "ДФ='гггг-ММ-дд""T""ЧЧ:мм:сс'"));
			
		Иначе
			
			ДанныеСтроки.Вставить(Колонка.Имя, Строка(ЗначениеПоля));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ПолучитьСоединение()
	
	СерверЭластик = "linsrv01.apk-agroeco.ru";
	ПортЭластик = 9200;
	
	ПараметрыПодключения = Новый Структура("Сервер, Порт", СерверЭластик, ПортЭластик);
			
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт);
	
	Возврат Соединение;
	
КонецФункции

Функция ПреобразоватьМассивСтруктурВМассивJSON(Знач МассивСеансов)

	МассивСтрокJSON = Новый Массив;

	Для Каждого Сеанс Из МассивСеансов Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("id", Строка(Новый УникальныйИдентификатор()));
		СтруктураДанных.Вставить("JSON", _ЗаписатьJSON(Сеанс));
		
		МассивСтрокJSON.Добавить(СтруктураДанных);
	КонецЦикла;

	Возврат МассивСтрокJSON;

КонецФункции

Функция _ЗаписатьJSON(Знач СтруктураКОбработке)

	Результат = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураКОбработке);
	
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиЗначениеКТипуJSON(Знач ЗначениеКОбработке)

	СтрокаПредставление = XMLСтрока(ЗначениеКОбработке);
	
	Попытка
		
		Данные = Число(ЗначениеКОбработке);
		
	Исключение
		
		Данные = ЗначениеКОбработке;
		
	КонецПопытки;	
	
	Возврат ОбернутьВКавычки(СтрокаПредставление);

КонецФункции

Функция ОбернутьВКавычки(Знач Строка) Экспорт
	
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		
		Возврат Строка;
		
	Иначе
		
		Возврат """" + Строка + """";
		
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область ES_API

Функция ИндексСуществует(ИмяИндекса, Соединение)
	
	HTTPЗапрос = Новый HTTPЗапрос(ИмяИндекса);
	
	Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
	
	Возврат Ответ.КодСостояния = 200;
	
КонецФункции

Функция УдалитьИндекс(ИмяИндекса, Соединение)
	
	HTTPЗапрос = Новый HTTPЗапрос(ИмяИндекса);
	
	Ответ = Соединение.Удалить(HTTPЗапрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьИндекс(ИмяИндекса, Соединение)
	
КонецФункции

// curl -XHEAD -i localhost:9200/_template/template_1
Функция ШаблонСуществует(ИмяШаблона, Соединение)
	
	HTTPЗапрос = Новый HTTPЗапрос("/_template/" + ИмяШаблона);
	
	Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
	
	Возврат Ответ.КодСостояния = 200;
	
КонецФункции

Функция СоздатьШаблон(ИмяШаблона, СтрокаОписаниеШаблона, Соединение)
	
	//Соединение = Новый HTTPСоединение(ПутьКЭластику,Порт);
	Заголовки = Новый Соответствие;
	Заголовки["Content-Type"] = "application/json";
	
	//URL = СтрШаблон("/%1/%2/%3", ИмяИндексаElasticsearch, ИмяТипаElasticsearch, XMLСтрока(id));
	//Запрос = Новый HTTPЗапрос(URL, Заголовки);
	
	//Запрос.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8); 
	//Ответ = Соединение.Записать(Запрос);
	
	
	
	HTTPЗапрос = Новый HTTPЗапрос("/_template/" + ИмяШаблона, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаОписаниеШаблона, , ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.Записать(HTTPЗапрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

//ВыполнитьОтправкуЖурналаРегистрации();