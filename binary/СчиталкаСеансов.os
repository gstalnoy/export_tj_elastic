Перем ЭтоWindows;
Перем мНастройки;

Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Функция СтрокаЗапускаКлиента()
	
	Перем ПутьКлиентаАдминистрирования;
	Если ЭтоWindows Тогда 
		ПутьКлиентаАдминистрирования = ОбернутьВКавычки(мНастройки.ПутьКлиентаАдминистрирования);
	Иначе
		ПутьКлиентаАдминистрирования = мНастройки.ПутьКлиентаАдминистрирования;
	КонецЕсли;
	
	Возврат  ПутьКлиентаАдминистрирования + " ";
	
КонецФункции

Функция КомандаПолученияСвойствКластера()
	Возврат "cluster list";
КонецФункции

Функция АдресСервераАдминистрирования()
	Возврат мНастройки.АдресСервераАдминистрирования;
КонецФункции	

Процедура ВывестиДанныеПроцесса(Знач Процесс, Знач Приемник)
	Вывод = Процесс.ПотокВывода.Прочитать();
	Ошибки = Процесс.ПотокОшибок.Прочитать();
	Если СтрДлина(Строка(Вывод)) > 0 Тогда
		Приемник.ДобавитьСтроку(Вывод);
	КонецЕсли;
	Если СтрДлина(Строка(Ошибки)) > 0 Тогда
		Приемник.ДобавитьСтроку(Ошибки);
	КонецЕсли;
КонецПроцедуры

Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)
	Перем ПаузаОжиданияЧтенияБуфера;
	
	ПаузаОжиданияЧтенияБуфера = 1;
	
	Процесс = СоздатьПроцесс(СтрокаВыполнения,,Истина);
	Процесс.Запустить();
	
	Текст = Новый ТекстовыйДокумент;

	Пока Истина Цикл

		ВывестиДанныеПроцесса(Процесс, Текст);

		Если Процесс.Завершен Тогда
			Процесс.ОжидатьЗавершения(); // финальный сброс буферов
			ВывестиДанныеПроцесса(Процесс, Текст);
			Прервать;
		КонецЕсли;

		Приостановить(ПаузаОжиданияЧтенияБуфера);
		
	КонецЦикла;

	Если Процесс.КодВозврата = 0 Тогда
	Иначе
		Текст.ВставитьСтроку(1, "Сообщение от RAS/RAC: "); 
		ВызватьИсключение Текст.ПолучитьТекст();
	КонецЕсли;	
	
	Возврат Текст;

КонецФункции

Функция РазделитьНаМассив(Знач ТекстовыйДок)

	КоличествоСтрок = ТекстовыйДок.КоличествоСтрок();

	МассивТекстовыхДок = Новый Массив;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для НомерСтр=1 По КоличествоСтрок Цикл
	
		СтрокаВозврата = СокрЛП(ТекстовыйДок.ПолучитьСтроку(НомерСтр)); 
		
		Если СтрДлина(СтрокаВозврата) = 0 Тогда
			МассивТекстовыхДок.Добавить(ТекстовыйДокумент);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Иначе
			ТекстовыйДокумент.ДобавитьСтроку(СтрокаВозврата);
		КонецЕсли	
	
	КонецЦикла;
	
	Возврат МассивТекстовыхДок;

КонецФункции

Функция ВернутьСтруктуруИзТекстаПоРазделителю(Знач ТекстовыйДок, Разделитель = ":")

	КоличествоСтрок = ТекстовыйДок.КоличествоСтрок();

	СтруктураВозврата = Новый Структура;
	
	Для НомерСтр=1 По КоличествоСтрок Цикл
		
		Ключ = "";
		Значение = "";
		
		СтрокаВозврата = ТекстовыйДок.ПолучитьСтроку(НомерСтр); 
		МассивКлючаЗначения = СтрРазделить(СтрокаВозврата, Разделитель, Ложь); 
		Если МассивКлючаЗначения.Количество() = 2 Тогда
			Ключ = МассивКлючаЗначения[0];
			Значение = МассивКлючаЗначения[1];
		КонецЕсли;
		
		Ключ = СтрЗаменить(СокрЛП(Ключ),"-","_");
		Значение = СокрЛП(Значение);
		
		Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
			СтруктураВозврата.Вставить(Ключ, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция СвойстваКластера()

	КоманднаяСтрокаПолученияСвойствКластера = СтрШаблон("%1 %2 %3",СтрокаЗапускаКлиента(),КомандаПолученияСвойствКластера(),АдресСервераАдминистрирования());

	ТекстПараметровКластера = ЗапуститьПроцесс(КоманднаяСтрокаПолученияСвойствКластера);
	Возврат ВернутьСтруктуруИзТекстаПоРазделителю(ТекстПараметровКластера);
	
КонецФункции

Функция ПолучитьСвойствоСтруктурыПоИмени(Знач Ключ, СтруктураСвойствКластера)

	Значение = "";
	
	Если НЕ СтруктураСвойствКластера.Свойство(Ключ,Значение) Тогда
		Сообщить("Запрошеное свойство  кластера "+Ключ+" отсутствует!");
	КонецЕсли;

	Возврат Значение;
	
КонецФункции	

Функция ПолучитьМассивСвойствСеансов(ДатаСреза)

	//КоманднаяСтрокаПолученияСвойствСессий = СтрШаблон("%1 session list --cluster=""%2"" --infobase=""%3"" ""%4""",СтрокаЗапускаКлиента(),мНастройки.УИДКластера,мНастройки.ИмяИБ,АдресСервераАдминистрирования());
	//--cluster-user = s.rudakov_ras
	//--cluster-pwd  = 159357456

	КоманднаяСтрокаПолученияСвойствСессий = СтрШаблон("%1 session list --cluster=""%2"" --infobase=""%3"" --cluster-user=""%5"" --cluster-pwd=""%6"" ""%4""", СтрокаЗапускаКлиента(), мНастройки.УИДКластера, мНастройки.ИмяИБ, АдресСервераАдминистрирования(), мНастройки.Администратор, мНастройки.Пароль);

	ТекстСвойствСессий = ЗапуститьПроцесс(КоманднаяСтрокаПолученияСвойствСессий);

	МассивСеансов = РазделитьНаМассив(ТекстСвойствСессий);
	
	МассивСтруктур = Новый Массив;
		
	Для Каждого СеансТекст Из МассивСеансов Цикл
	
		СтруктураСвойств = ВернутьСтруктуруИзТекстаПоРазделителю(СеансТекст);
		СтруктураСвойств.Вставить("timestamp", ДатаСреза);
		СтруктураСвойств.Вставить("id", ПолучитьСвойствоСтруктурыПоИмени("session_id", СтруктураСвойств));
		СтруктураСвойств.Вставить("infobase_id", ПолучитьСвойствоСтруктурыПоИмени("infobase", СтруктураСвойств));
		СтруктураСвойств.Вставить("infobase", мНастройки.ИмяИБ);
		МассивСтруктур.Добавить(СтруктураСвойств);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;

КонецФункции

Функция ПреобразоватьМассивСтруктурВМассивJSON(Знач МассивСеансов)

	МассивСтрокJSON = Новый Массив;

	Для Каждого Сеанс Из МассивСеансов Цикл
		Структура = Новый Структура;
		Структура.Вставить("id", Строка(Новый УникальныйИдентификатор));
		Структура.Вставить("JSON", ЗаписатьJSON(Сеанс));
		МассивСтрокJSON.Добавить(Структура);
	КонецЦикла;

	Возврат МассивСтрокJSON;

КонецФункции

Функция ЗаписатьJSON(Знач СтруктураКОбработке)

	СтрокаВозврата = "";
	
	Для Каждого Элемент Из СтруктураКОбработке Цикл
		ЗапятаяПоНеобходимости = ?(ЗначениеЗаполнено(СтрокаВозврата),",","");
		СтрокаВозврата = СтрокаВозврата + СтрШаблон("%1""%2"":%3",ЗапятаяПоНеобходимости,Элемент.Ключ,ПривестиЗначениеКТипуJSON(Элемент.Значение));
	КонецЦикла;	
	
	СтрокаВозврата = "{"+СтрокаВозврата + "}";

	Возврат СтрокаВозврата;
	
КонецФункции

Функция ПривестиЗначениеКТипуJSON(Знач ЗначениеКОбработке)

	СтрокаПредставление = XMLСтрока(ЗначениеКОбработке);
	
	Попытка
		Данные = Число(ЗначениеКОбработке);
	Исключение
		Данные = ЗначениеКОбработке;
	КонецПопытки;	
	
	Если ТипЗнч(Данные) = Тип("Число") Тогда	
		Возврат Данные; 
	Иначе 
		Возврат ОбернутьВКавычки(СтрокаПредставление);
	КонецЕсли;	

КонецФункции

Функция ВернутьСтрокуJSON_ПоСтруктуре(Знач СтруктураКОбработке)

	СтрокаJSON = ЗаписатьJSON(СтруктураКОбработке);
	Возврат СтрокаJSON;

КонецФункции

Процедура СчиталкаСеансов()

	Массив = ПреобразоватьМассивСтруктурВМассивJSON(ПолучитьМассивСвойствСеансов(ТекущаяДата()));
	КоличествоСеансов = Массив.Количество();

	Сообщить(КоличествоСеансов);

	Для Каждого Структура Из Массив Цикл
		ЗаписатьЗначение(Структура.id, Структура.JSON);
	КонецЦикла;	

КонецПроцедуры

Процедура ЗаписатьЗначение(id, JSON)
	
	ПутьКЭластику  =  мНастройки.АдресСервераElasticsearch;
	Порт           =  мНастройки.ПортСервераElasticsearch; 
	
	Попытка
		Соединение = Новый HTTPСоединение(ПутьКЭластику,Порт);
		Заголовки = Новый Соответствие;
	    Заголовки["Content-Type"] = "application/json";
		
		URL = СтрШаблон("/%1/%2/%3",мНастройки.ИмяИндексаElasticsearch,мНастройки.ИмяТипаElasticsearch,XMLСтрока(id));
	    Запрос = Новый HTTPЗапрос(URL, Заголовки);
	    Запрос.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8); 
	    Ответ = Соединение.Записать(Запрос);
	Исключение
		ВызватьИсключение "Ошибка отправки в Elastic: "+ОписаниеОшибки();
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПолучитьНастройкиИзКоманднойСтроки()

	Если АргументыКоманднойСтроки.Количество()<4 Тогда
		Сообщить("Указано не правильное количество параметров командной строки!");
		ВызватьИсключение "1)ПутьКлиентаАдминистрирования 2)АдресСервераАдминистрирования 3)ИмяИБ 4)АдресСервераElasticsearch 5)ПортСервераElasticsearch";
	Иначе	
		ПутьКлиентаАдминистрирования    = АргументыКоманднойСтроки[0];
		АдресСервераАдминистрирования   = АргументыКоманднойСтроки[1]; 
		ИмяИБ                           = ОбернутьВКавычки(АргументыКоманднойСтроки[2]); 
		АдресСервераElasticsearch       = АргументыКоманднойСтроки[3];
		Попытка
			ПортСервераElasticsearch    = АргументыКоманднойСтроки[4];
		Исключение
			ПортСервераElasticsearch 	= 9200;
		КонецПопытки;	
		ИмяИндексаElasticsearch			= "onec"; 
		ИмяТипаElasticsearch			= "session"; 
		ПользовательАдмин               = АргументыКоманднойСтроки[5];
		ПарольАдмин                     = АргументыКоманднойСтроки[6];
	КонецЕсли;

	мНастройки = Новый Структура();
	мНастройки.Вставить("ПутьКлиентаАдминистрирования", ПутьКлиентаАдминистрирования);
	мНастройки.Вставить("АдресСервераАдминистрирования", АдресСервераАдминистрирования);
	мНастройки.Вставить("ИмяИБ", ИмяИБ);
	мНастройки.Вставить("УИДКластера", ПолучитьСвойствоСтруктурыПоИмени("cluster", СвойстваКластера()));
	мНастройки.Вставить("АдресСервераElasticsearch", АдресСервераElasticsearch);
	мНастройки.Вставить("ПортСервераElasticsearch", ПортСервераElasticsearch);
	мНастройки.Вставить("ИмяИндексаElasticsearch", ИмяИндексаElasticsearch);
	мНастройки.Вставить("ИмяТипаElasticsearch", ИмяТипаElasticsearch);

	мНастройки.Вставить("Администратор", ПользовательАдмин);
	мНастройки.Вставить("Пароль",        ПарольАдмин);

КонецПроцедуры

// Начало

СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

ПолучитьНастройкиИзКоманднойСтроки();

ТекущаяДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
СчиталкаСеансов();
Сообщить("Время обработки данных: "+XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах()- ТекущаяДата)+" мс.");



